"!function(e,s){\"object\"==typeof exports&&\"undefined\"!=typeof module?s(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],s):s((e=\"undefined\"!=typeof globalThis?globalThis:e||self).TangoRPC={})}(this,(function(e){\"use strict\";function s(e,s,n,t){return new(n||(n=Promise))((function(a,r){function i(e){try{o(t.next(e))}catch(e){r(e)}}function c(e){try{o(t.throw(e))}catch(e){r(e)}}function o(e){var s;e.done?a(e.value):(s=e.value,s instanceof n?s:new n((function(e){e(s)}))).then(i,c)}o((t=t.apply(e,s||[])).next())}))}function n(){return`${Date.now().toString(36)}-${Math.random().toString(36).substring(2,8)}`}e.Client=class{constructor(e){this.channel=e,this._isConnected=!1,this.onConnectHandler=null,this.procedures={},this.callbacks={},this.senderId=`client-${n()}`,this.channel.addMessageListener((e=>this.handleMessage(e))),this.sendClientReadyMessage()}createMessage(e){return Object.assign(Object.assign({},e),{senderId:this.senderId})}sendClientReadyMessage(){const e=this.createMessage({id:n(),messageType:\"clientReadyMessage\"});this.sendMessage(e)}sendMessage(e){this.channel.sendMessage(JSON.stringify(e))}onConnect(e){this.onConnectHandler=e,this.isConnected&&e()}get isConnected(){return this._isConnected}get proxy(){return new Proxy({},{get:(e,s)=>(...e)=>{const t=n(),a=e.map(((e,s)=>{if(\"function\"==typeof e){const n=`${t}-${s}`;return this.callbacks[n]=e,{type:\"callback\",callbackId:n}}return e})),r=this.createMessage({messageType:\"invokeMessage\",id:t,procedure:s,args:a});return this.sendMessage(r),new Promise((e=>{this.procedures[t]=e}))}})}handleMessage(e){const s=JSON.parse(e);if(s.senderId!==this.senderId)switch(s.messageType){case\"serverReadyMessage\":{const e=!this._isConnected;this._isConnected=!0,e&&this.onConnectHandler&&this.onConnectHandler();break}case\"resultMessage\":{const{id:e,result:n}=s;this.procedures[e](n),delete this.procedures[e];break}case\"errorMessage\":{const{id:e,error:n}=s;this.procedures[e](Promise.reject(new Error(n)));break}case\"callbackMessage\":{const{callbackId:e,args:n}=s;this.callbacks[e](...n);break}}}cleanup(){this.channel.removeMessageListener(this.handleMessage)}},e.Server=class{constructor(e,s){this.channel=e,this.proceduresImplementation=s,this.senderId=`server-${n()}`,this.channel.addMessageListener((e=>this.handleMessage(e))),this.sendServerReadyMessage()}sendServerReadyMessage(){const e=this.createMessage({id:n(),messageType:\"serverReadyMessage\"});this.sendMessage(e)}createMessage(e){return Object.assign(Object.assign({},e),{senderId:this.senderId})}wrapCallbackArgs(e){return e.map((e=>function(e){return\"callback\"===e.type&&\"string\"==typeof e.callbackId}(e)?(...s)=>{const n=this.createMessage({messageType:\"callbackMessage\",callbackId:e.callbackId,args:s,id:\"noop\"});this.sendMessage(n)}:e))}sendMessage(e){this.channel.sendMessage(JSON.stringify(e))}handleMessage(e){return s(this,void 0,void 0,(function*(){const s=JSON.parse(e);if(s.senderId!==this.senderId)if(\"clientReadyMessage\"===s.messageType)this.sendServerReadyMessage();else if(\"invokeMessage\"===s.messageType){const{id:e,procedure:n,args:t}=s,a=this.wrapCallbackArgs(t);try{const s=this.proceduresImplementation[n];if(\"function\"!=typeof s)throw new Error(`Procedure '${n}' is not a function`);const t=yield s.bind(this.proceduresImplementation)(...a),r=this.createMessage({messageType:\"resultMessage\",id:e,result:t});this.sendMessage(r)}catch(s){const n=this.createMessage({messageType:\"errorMessage\",id:e,error:`${s}`});this.sendMessage(n)}}}))}cleanup(){this.channel.removeMessageListener(this.handleMessage)}},e.createWebViewChannel=function(){const e=new WeakMap;return{sendMessage(e){window.ReactNativeWebView.postMessage(e)},addMessageListener(s){const n=e=>{const n=e.data;s(n)};document.addEventListener(\"message\",n),window.addEventListener(\"message\",n),e.set(s,n)},removeMessageListener(s){const n=e.get(s);n&&(document.removeEventListener(\"message\",n),window.removeEventListener(\"message\",n))}}}}));"
